{
    "name": "ar-retro-video",
    "type": "registry:component",
    "dependencies": [
      "lucide-react"
    ],
    "registryDependencies": [],
    "files": [
      {
        "type": "registry:component",
        "content": "\"use client\"\n\nimport { useState, useRef } from \"react\"\nimport { Play, Pause, Volume2, VolumeX, Maximize } from \"lucide-react\"\n\ninterface RetroVideoProps {\n  src?: string\n  poster?: string\n  title?: string\n  primaryColor?: string\n  secondaryColor?: string\n  textColor?: string\n  className?: string\n  autoPlay?: boolean\n  controls?: boolean\n}\n\nexport function RetroVideo({\n  src = \"https://video.twimg.com/ext_tw_video/1946253365794468190/pu/vid/1280x720/8qXqXqXqXqXqXqXq.mp4\",\n  poster = \"https://zh5mns2xs4orzalnne62iz47xz7ag54ujodwlfmdbrzk5xymqkeq.arweave.net/yfrGy1eXHRyBbWk9pGefvn4Dd5RLh2WVgwxyrt8Mgok\",\n  title = \"Retro Video Player\",\n  primaryColor = \"#2d2d2d\",\n  secondaryColor = \"#f5f5dc\",\n  textColor = \"#2d2d2d\",\n  className = \"\",\n  autoPlay = false,\n  controls = true,\n}: RetroVideoProps) {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isMuted, setIsMuted] = useState(false)\n  const [currentTime, setCurrentTime] = useState(0)\n  const [duration, setDuration] = useState(0)\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  const togglePlay = () => {\n    if (videoRef.current) {\n      if (isPlaying) {\n        videoRef.current.pause()\n      } else {\n        videoRef.current.play()\n      }\n      setIsPlaying(!isPlaying)\n    }\n  }\n\n  const toggleMute = () => {\n    if (videoRef.current) {\n      videoRef.current.muted = !isMuted\n      setIsMuted(!isMuted)\n    }\n  }\n\n  const handleTimeUpdate = () => {\n    if (videoRef.current) {\n      setCurrentTime(videoRef.current.currentTime)\n    }\n  }\n\n  const handleLoadedMetadata = () => {\n    if (videoRef.current) {\n      setDuration(videoRef.current.duration)\n    }\n  }\n\n  const handleSeek = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const time = parseFloat(e.target.value)\n    if (videoRef.current) {\n      videoRef.current.currentTime = time\n      setCurrentTime(time)\n    }\n  }\n\n  const formatTime = (time: number) => {\n    const minutes = Math.floor(time / 60)\n    const seconds = Math.floor(time % 60)\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`\n  }\n\n  return (\n    <div\n      className={`rounded-lg border-2 overflow-hidden ${className}`}\n      style={{\n        backgroundColor: primaryColor,\n        borderColor: primaryColor,\n        boxShadow: `6px 6px 0px ${primaryColor}`,\n      }}\n    >\n      {/* Video Header */}\n      <div\n        className=\"px-4 py-2 border-b-2 flex items-center justify-between\"\n        style={{\n          backgroundColor: secondaryColor,\n          borderBottomColor: primaryColor,\n          color: textColor,\n        }}\n      >\n        <span className=\"font-mono font-bold text-sm\">{title}</span>\n        <div className=\"flex gap-1\">\n          <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n          <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n          <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n        </div>\n      </div>\n\n      {/* Video Container */}\n      <div className=\"relative aspect-video bg-black\">\n        <video\n          ref={videoRef}\n          src={src}\n          poster={poster}\n          className=\"w-full h-full object-cover\"\n          onTimeUpdate={handleTimeUpdate}\n          onLoadedMetadata={handleLoadedMetadata}\n          onPlay={() => setIsPlaying(true)}\n          onPause={() => setIsPlaying(false)}\n          autoPlay={autoPlay}\n          muted={isMuted}\n        />\n\n        {/* Play Button Overlay */}\n        {!isPlaying && (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <button\n              onClick={togglePlay}\n              className=\"w-16 h-16 rounded-full border-4 flex items-center justify-center transition-all duration-200 hover:scale-110\"\n              style={{\n                backgroundColor: secondaryColor,\n                borderColor: primaryColor,\n                color: primaryColor,\n              }}\n            >\n              <Play className=\"w-6 h-6 ml-1\" />\n            </button>\n          </div>\n        )}\n\n        {/* Controls */}\n        {controls && (\n          <div\n            className=\"absolute bottom-0 left-0 right-0 p-3 flex items-center justify-between\"\n            style={{ backgroundColor: `${primaryColor}CC` }}\n          >\n            <div className=\"flex items-center gap-2\">\n              <button onClick={togglePlay} style={{ color: secondaryColor }}>\n                {isPlaying ? <Pause className=\"w-5 h-5\" /> : <Play className=\"w-5 h-5\" />}\n              </button>\n              <button onClick={toggleMute} style={{ color: secondaryColor }}>\n                {isMuted ? <VolumeX className=\"w-5 h-5\" /> : <Volume2 className=\"w-5 h-5\" />}\n              </button>\n              <span className=\"text-xs font-mono\" style={{ color: secondaryColor }}>\n                {formatTime(currentTime)} / {formatTime(duration)}\n              </span>\n            </div>\n            <div className=\"flex-1 mx-4\">\n              <input\n                type=\"range\"\n                min=\"0\"\n                max={duration || 0}\n                value={currentTime}\n                onChange={handleSeek}\n                className=\"w-full h-1 rounded-full appearance-none cursor-pointer\"\n                style={{\n                  background: `${secondaryColor}33`,\n                  outline: 'none',\n                }}\n              />\n            </div>\n            <button style={{ color: secondaryColor }}>\n              <Maximize className=\"w-5 h-5\" />\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}",
        "path": "components/ardacity/ar-retro-video.tsx",
        "target": "components/ardacity/ar-retro-video.tsx"
      }
    ]
  }