{
  "name": "liquid-glass-music-player",
  "type": "registry:component",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { memo, useCallback, useEffect, useRef, useState } from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { animate } from \"motion/react\"\nimport { Play, Pause, SkipBack, SkipForward, Volume2 } from \"lucide-react\"\n\ninterface MusicPlayerProps {\n  albumArt: string\n  songTitle: string\n  artist: string\n  duration?: number\n  className?: string\n}\n\nconst GlowingEffect = memo(\n  ({\n    blur = 0,\n    inactiveZone = 0.01,\n    proximity = 64,\n    spread = 40,\n    variant = \"default\",\n    glow = true,\n    className,\n    disabled = false,\n    movementDuration = 2,\n    borderWidth = 1,\n  }: {\n    blur?: number\n    inactiveZone?: number\n    proximity?: number\n    spread?: number\n    variant?: \"default\" | \"white\"\n    glow?: boolean\n    className?: string\n    disabled?: boolean\n    movementDuration?: number\n    borderWidth?: number\n  }) => {\n    const containerRef = useRef<HTMLDivElement>(null)\n    const lastPosition = useRef({ x: 0, y: 0 })\n    const animationFrameRef = useRef<number>(0)\n\n    const handleMove = useCallback(\n      (e?: MouseEvent | { x: number; y: number }) => {\n        if (!containerRef.current) return\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current)\n        }\n        animationFrameRef.current = requestAnimationFrame(() => {\n          const element = containerRef.current\n          if (!element) return\n          const { left, top, width, height } = element.getBoundingClientRect()\n          const mouseX = e?.x ?? lastPosition.current.x\n          const mouseY = e?.y ?? lastPosition.current.y\n          if (e) {\n            lastPosition.current = { x: mouseX, y: mouseY }\n          }\n          const center = [left + width * 0.5, top + height * 0.5]\n          const distanceFromCenter = Math.hypot(mouseX - center[0], mouseY - center[1])\n          const inactiveRadius = 0.5 * Math.min(width, height) * inactiveZone\n          if (distanceFromCenter < inactiveRadius) {\n            element.style.setProperty(\"--active\", \"0\")\n            return\n          }\n          const isActive =\n            mouseX > left - proximity &&\n            mouseX < left + width + proximity &&\n            mouseY > top - proximity &&\n            mouseY < top + height + proximity\n          element.style.setProperty(\"--active\", isActive ? \"1\" : \"0\")\n          if (!isActive) return\n          const currentAngle = Number.parseFloat(element.style.getPropertyValue(\"--start\")) || 0\n          const targetAngle = (180 * Math.atan2(mouseY - center[1], mouseX - center[0])) / Math.PI + 90\n          const angleDiff = ((targetAngle - currentAngle + 180) % 360) - 180\n          const newAngle = currentAngle + angleDiff\n          animate(currentAngle, newAngle, {\n            duration: movementDuration,\n            ease: [0.16, 1, 0.3, 1],\n            onUpdate: (value) => {\n              element.style.setProperty(\"--start\", String(value))\n            },\n          })\n        })\n      },\n      [inactiveZone, proximity, movementDuration],\n    )\n\n    useEffect(() => {\n      if (disabled) return\n      const handleScroll = () => handleMove()\n      const handlePointerMove = (e: PointerEvent) => handleMove(e)\n      window.addEventListener(\"scroll\", handleScroll, { passive: true })\n      document.body.addEventListener(\"pointermove\", handlePointerMove, {\n        passive: true,\n      })\n      return () => {\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current)\n        }\n        window.removeEventListener(\"scroll\", handleScroll)\n        document.body.removeEventListener(\"pointermove\", handlePointerMove)\n      }\n    }, [handleMove, disabled])\n\n    return (\n      <>\n        <div\n          className={cn(\n            \"pointer-events-none absolute -inset-px hidden rounded-[inherit] border opacity-0 transition-opacity\",\n            glow && \"opacity-100\",\n            variant === \"white\" && \"border-white\",\n            disabled && \"!block\",\n          )}\n        />\n        <div\n          ref={containerRef}\n          style={\n            {\n              \"--blur\": `${blur}px`,\n              \"--spread\": spread,\n              \"--start\": \"0\",\n              \"--active\": \"0\",\n              \"--glowingeffect-border-width\": `${borderWidth}px`,\n              \"--repeating-conic-gradient-times\": \"5\",\n              \"--gradient\":\n                variant === \"white\"\n                  ? `repeating-conic-gradient(\n                  from 236.84deg at 50% 50%,\n                  var(--black),\n                  var(--black) calc(25% / var(--repeating-conic-gradient-times))\n                )`\n                  : `radial-gradient(circle, #dd7bbb 10%, #dd7bbb00 20%),\n                radial-gradient(circle at 40% 40%, #d79f1e 5%, #d79f1e00 15%),\n                radial-gradient(circle at 60% 60%, #5a922c 10%, #5a922c00 20%),\n                 radial-gradient(circle at 40% 60%, #4c7894 10%, #4c789400 20%),\n                repeating-conic-gradient(\n                  from 236.84deg at 50% 50%,\n                  #dd7bbb 0%,\n                  #d79f1e calc(25% / var(--repeating-conic-gradient-times)),\n                  #5a922c calc(50% / var(--repeating-conic-gradient-times)),\n                   #4c7894 calc(75% / var(--repeating-conic-gradient-times)),\n                  #dd7bbb calc(100% / var(--repeating-conic-gradient-times))\n                )`,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"pointer-events-none absolute inset-0 rounded-[inherit] opacity-100 transition-opacity\",\n            glow && \"opacity-100\",\n            blur > 0 && \"blur-[var(--blur)] \",\n            className,\n            disabled && \"!hidden\",\n          )}\n        >\n          <div\n            className={cn(\n              \"glow\",\n              \"rounded-[inherit]\",\n              'after:content-[\"\"] after:rounded-[inherit] after:absolute after:inset-[calc(-1*var(--glowingeffect-border-width))]',\n              \"after:[border:var(--glowingeffect-border-width)_solid_transparent]\",\n              \"after:[background:var(--gradient)] after:[background-attachment:fixed]\",\n              \"after:opacity-[var(--active)] after:transition-opacity after:duration-300\",\n              \"after:[mask-clip:padding-box,border-box]\",\n              \"after:[mask-composite:intersect]\",\n              \"after:[mask-image:linear-gradient(#0000,#0000),conic-gradient(from_calc((var(--start)-var(--spread))*1deg),#00000000_0deg,#fff,#00000000_calc(var(--spread)*2deg))]\",\n            )}\n          />\n        </div>\n      </>\n    )\n  },\n)\n\nGlowingEffect.displayName = \"GlowingEffect\"\n\nexport function LiquidGlassMusicPlayer({ albumArt, songTitle, artist, duration = 180, className }: MusicPlayerProps) {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [currentTime, setCurrentTime] = useState(0)\n  const [volume, setVolume] = useState(75)\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins}:${secs.toString().padStart(2, \"0\")}`\n  }\n\n  const progressPercentage = (currentTime / duration) * 100\n\n  return (\n    <>\n      {/* SVG Filter for Liquid Glass Effect */}\n      <svg style={{ display: \"none\" }}>\n        <filter id=\"glass-distortion-music\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\" filterUnits=\"objectBoundingBox\">\n          <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.002 0.008\" numOctaves=\"2\" seed=\"14\" result=\"turbulence\" />\n          <feComponentTransfer in=\"turbulence\" result=\"mapped\">\n            <feFuncR type=\"gamma\" amplitude=\"1.2\" exponent=\"8\" offset=\"0.4\" />\n            <feFuncG type=\"gamma\" amplitude=\"0.1\" exponent=\"1\" offset=\"0.1\" />\n            <feFuncB type=\"gamma\" amplitude=\"0.1\" exponent=\"1\" offset=\"0.6\" />\n          </feComponentTransfer>\n          <feGaussianBlur in=\"turbulence\" stdDeviation=\"4\" result=\"softMap\" />\n          <feSpecularLighting\n            in=\"softMap\"\n            surfaceScale=\"8\"\n            specularConstant=\"1.5\"\n            specularExponent=\"120\"\n            lightingColor=\"white\"\n            result=\"specLight\"\n          >\n            <fePointLight x=\"-150\" y=\"-150\" z=\"400\" />\n          </feSpecularLighting>\n          <feComposite in=\"specLight\" operator=\"arithmetic\" k1=\"0\" k2=\"1.2\" k3=\"1.2\" k4=\"0\" result=\"litImage\" />\n          <feDisplacementMap in=\"SourceGraphic\" in2=\"softMap\" scale=\"300\" xChannelSelector=\"R\" yChannelSelector=\"G\" />\n        </filter>\n      </svg>\n\n      <div className={cn(\"relative w-full max-w-sm mx-auto\", className)}>\n        <div className=\"liquidGlass-wrapper relative flex font-semibold overflow-hidden text-black cursor-pointer shadow-[0_6px_6px_rgba(0,0,0,0.2),0_0_20px_rgba(0,0,0,0.1)] transition-all duration-[400ms] ease-[cubic-bezier(0.175,0.885,0.32,2.2)] rounded-2xl md:rounded-3xl p-3 hover:p-4 hover:scale-[1.02] hover:shadow-[0_12px_12px_rgba(0,0,0,0.3),0_0_40px_rgba(0,0,0,0.2)]\">\n          {/* Liquid Glass Effect Layer */}\n          <div className=\"liquidGlass-effect absolute z-0 inset-0 [backdrop-filter:blur(1px)] [filter:url(#glass-distortion-music)] overflow-hidden [isolation:isolate] rounded-2xl md:rounded-3xl\" />\n\n          {/* Tint Layer */}\n          <div className=\"liquidGlass-tint z-[1] absolute inset-0 bg-white/[0.048] rounded-2xl md:rounded-3xl\" />\n\n          {/* Shine Layer */}\n          <div className=\"liquidGlass-shine absolute inset-0 z-[2] overflow-hidden rounded-2xl md:rounded-3xl shadow-[inset_2px_2px_1px_0_rgba(255,255,255,0.5),inset_-1px_-1px_1px_1px_rgba(255,255,255,0.5)]\" />\n\n          {/* Content Layer */}\n          <div className=\"liquidGlass-text z-[3] relative flex h-full flex-col gap-4 overflow-hidden rounded-xl p-6  w-full\">\n            <GlowingEffect spread={40} glow={true} disabled={false} proximity={64} inactiveZone={0.01} />\n\n            {/* Album Art */}\n            <div className=\"relative mx-auto h-48 w-48 overflow-hidden rounded-2xl shadow-lg\">\n              <img\n                src={albumArt || \"/placeholder.svg\"}\n                alt={`${songTitle} album art`}\n                className=\"h-full w-full object-cover\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\" />\n            </div>\n\n            {/* Song Info */}\n            <div className=\"text-center space-y-1\">\n              <h3 className=\"font-semibold text-lg dark:text-white text-black truncate\">{songTitle}</h3>\n              <p className=\"text-sm dark:text-white/70 text-black/70 truncate\">{artist}</p>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"space-y-2\">\n              <div className=\"relative h-2 dark:bg-white/10 bg-black/10 rounded-full overflow-hidden\">\n                <div\n                  className=\"absolute left-0 top-0 h-full bg-gradient-to-r from-purple-500 to-pink-500 rounded-full transition-all duration-300\"\n                  style={{ width: `${progressPercentage}%` }}\n                />\n                <div\n                  className=\"absolute top-1/2 w-4 h-4 bg-black dark:bg-white rounded-full shadow-lg transform -translate-y-1/2 transition-all duration-300\"\n                  style={{ left: `calc(${progressPercentage}% - 8px)` }}\n                />\n              </div>\n              <div className=\"flex justify-between text-xs dark:text-white/60 text-black/60\">\n                <span>{formatTime(currentTime)}</span>\n                <span>{formatTime(duration)}</span>\n              </div>\n            </div>\n\n            {/* Controls */}\n            <div className=\"flex items-center justify-center gap-4\">\n              <button className=\"p-2 rounded-full hover:bg-white/5 transition-colors\">\n                <SkipBack className=\"h-5 w-5 dark:text-white text-black\" />\n              </button>\n              <button\n                onClick={() => setIsPlaying(!isPlaying)}\n                className=\"p-3 rounded-full bg-gradient-to-r from-black to-zinc-900 hover:from-cyan-900 hover:to-cyan-600 transition-all duration-300 shadow-lg\"\n              >\n                {isPlaying ? <Pause className=\"h-6 w-6 text-white\" /> : <Play className=\"h-6 w-6 text-white ml-0.5\" />}\n              </button>\n              <button className=\"p-2 rounded-full hover:bg-white/5 transition-colors\">\n                <SkipForward className=\"h-5 w-5 dark:text-white text-black\" />\n              </button>\n            </div>\n\n            {/* Volume */}\n            <div className=\"flex items-center gap-3\">\n              <Volume2 className=\"h-4 w-4 dark:text-white/60 text-black/60\" />\n              <div className=\"flex-1 relative h-1 dark:bg-white/10 bg-black/10 rounded-full\">\n                <div\n                  className=\"absolute left-0 top-0 h-full bg-gradient-to-r dark:from-white from-black to-zinc-900 dark:to-zinc-100 rounded-full\"\n                  style={{ width: `${volume}%` }}\n                />\n              </div>\n              <span className=\"text-xs dark:text-white/60 text-black/60 w-8\">{volume}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}",
      "path": "components/ardacity/liquid-glass-music-player.tsx",
      "target": "components/ardacity/liquid-glass-music-player.tsx"
    }
  ]
}