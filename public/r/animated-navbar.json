{
  "name": "animated-navbar",
  "type": "registry:component",
  "dependencies": [
    "framer-motion",
    "lucide-react",
    "next"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { Menu, X } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport Link from \"next/link\";\nimport { cn } from \"@/lib/utils\";\n\ninterface NavLink {\n  label: string;\n  href: string;\n}\n\ninterface ButtonProps {\n  children: React.ReactNode;\n  variant?: \"default\" | \"secondary\";\n  className?: string;\n  onClick?: () => void;\n}\n\nfunction Button({ children, variant = \"default\", className, onClick }: ButtonProps) {\n  const baseClasses = \"px-4 py-2 rounded-lg font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2\";\n  \n  const variantClasses = {\n    default: \"bg-cyan-600 text-white hover:bg-cyan-700 focus:ring-cyan-500\",\n    secondary: \"bg-gray-100 text-gray-900 hover:bg-gray-200 focus:ring-gray-500\",\n  };\n\n  return (\n    <button\n      onClick={onClick}\n      className={cn(baseClasses, variantClasses[variant], className)}\n    >\n      {children}\n    </button>\n  );\n}\n\ninterface AnimatedNavbarProps {\n  brand?: string;\n  navLinks?: NavLink[];\n  loginHref?: string;\n  signupHref?: string;\n  className?: string;\n}\n\nconst defaultNavLinks: NavLink[] = [\n  { label: \"Pricing\", href: \"#pricing\" },\n  { label: \"Features\", href: \"#features\" },\n  { label: \"Insights\", href: \"#insights\" },\n];\n\nexport default function AnimatedNavbar({\n  brand = \"ArDacity\",\n  navLinks = defaultNavLinks,\n  loginHref = \"#login\",\n  signupHref = \"#signup\",\n  className,\n}: AnimatedNavbarProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  return (\n    <>\n      <motion.section\n        className={cn(\"pb-4 lg:pb-8 fixed w-full top-0 z-50\", className)}\n        animate={{\n          backgroundColor: isScrolled\n            ? \"rgba(255, 255, 255, 0)\"\n            : \"rgba(255, 255, 255, 0)\",\n        }}\n        transition={{ duration: 0.3 }}\n      >\n        <div\n          className={`container mx-auto transition-all duration-300 p-[1rem] sm:p-[0rem] ${\n            isScrolled ? \"max-w-5xl\" : \"max-w-full px-0\"\n          }`}\n        >\n          <motion.div\n            className={`transition-all duration-300 ${\n              isScrolled\n                ? \"border border-gray-200 rounded-[27px] lg:rounded-full bg-white/70 backdrop-blur shadow-sm\"\n                : \"bg-white/90 backdrop-blur \"\n            }`}\n            animate={{\n              borderRadius: isScrolled ? \"50px\" : \"0px\",\n              marginTop: isScrolled ? \"16px\" : \"0\",\n              backgroundColor: isScrolled\n                ? \"rgba(255, 255, 255, 0.7)\"\n                : \"transparent\",\n              boxShadow: isScrolled ? \"0 2px 10px rgba(0, 0, 0, 0.1)\" : \"none\",\n            }}\n            transition={{ duration: 0.3 }}\n          >\n            <figure\n              className={`grid grid-cols-2 lg:grid-cols-3 py-2 items-center ${\n                isScrolled ? \"lg:px-2 px-4\" : \"px-4 lg:px-8\"\n              }`}\n            >\n              <div>\n                <Link href=\"/\" className=\"flex items-center gap-2\">\n                  <div className=\"text-2xl font-bold text-cyan-600 px-5\">\n                    {brand}\n                  </div>\n                </Link>\n              </div>\n              <div className=\"hidden lg:flex justify-center items-center\">\n                <nav className=\"flex gap-6 font-medium text-gray-700\">\n                  {navLinks.map((each) => (\n                    <Link\n                      href={each.href}\n                      key={each.href}\n                      className=\"hover:text-cyan-600 transition-colors\"\n                    >\n                      {each.label}\n                    </Link>\n                  ))}\n                </nav>\n              </div>\n              <div className=\"flex justify-end gap-4\">\n                <button\n                  type=\"button\"\n                  onClick={() => setIsOpen(!isOpen)}\n                  className=\"lg:hidden\"\n                >\n                  {!isOpen ? (\n                    <motion.div\n                      initial={{ opacity: 1 }}\n                      animate={{\n                        opacity: isOpen ? 0 : 1,\n                      }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      <Menu className=\"text-gray-700\" size={25} />\n                    </motion.div>\n                  ) : (\n                    <motion.div\n                      initial={{ opacity: 0 }}\n                      animate={{\n                        opacity: isOpen ? 1 : 0,\n                      }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      <X className=\"text-gray-700\" size={30} />\n                    </motion.div>\n                  )}\n                </button>\n                <Link href={loginHref}>\n                  <Button\n                    variant=\"secondary\"\n                    className=\"hidden lg:inline-flex items-center\"\n                  >\n                    Login\n                  </Button>\n                </Link>\n                <Link href={signupHref}>\n                  <Button\n                    variant=\"default\"\n                    className=\"hidden lg:inline-flex items-center\"\n                  >\n                    Get Started\n                  </Button>\n                </Link>\n              </div>\n            </figure>\n            <AnimatePresence>\n              {isOpen && (\n                <motion.figure\n                  initial={{ height: 0 }}\n                  animate={{ height: \"auto\" }}\n                  exit={{ height: 0 }}\n                  className=\"overflow-hidden lg:hidden\"\n                >\n                  <div className=\"flex flex-col items-center gap-4 py-4\">\n                    {navLinks.map((link) => (\n                      <Link\n                        key={link.href}\n                        href={link.href}\n                        className=\"text-gray-700 hover:text-cyan-600 transition-colors\"\n                      >\n                        {link.label}\n                      </Link>\n                    ))}\n                    <Link href={loginHref} className=\"w-3/4\">\n                      <Button className=\"w-full\" variant=\"secondary\">\n                        Log In\n                      </Button>\n                    </Link>\n                    <Link href={signupHref} className=\"w-3/4\">\n                      <Button className=\"w-full\" variant=\"default\">\n                        Get Started\n                      </Button>\n                    </Link>\n                  </div>\n                </motion.figure>\n              )}\n            </AnimatePresence>\n          </motion.div>\n        </div>\n      </motion.section>\n      <div className=\"pb-[86px] md:pb-[98px]\"></div>\n    </>\n  );\n}",
      "path": "components/ardacity/animated-navbar.tsx",
      "target": "components/ardacity/animated-navbar.tsx"
    }
  ]
}